{"version":3,"file":"vfs.esm.js","sources":["../src/index.ts"],"sourcesContent":["type System = import(\"typescript\").System\ntype CompilerOptions = import(\"typescript\").CompilerOptions\ntype CustomTransformers = import(\"typescript\").CustomTransformers\ntype LanguageServiceHost = import(\"typescript\").LanguageServiceHost\ntype CompilerHost = import(\"typescript\").CompilerHost\ntype SourceFile = import(\"typescript\").SourceFile\ntype TS = typeof import(\"typescript\")\n\ntype FetchLike = (url: string) => Promise<{ json(): Promise<any>; text(): Promise<string> }>\n\ninterface LocalStorageLike {\n  getItem(key: string): string | null\n  setItem(key: string, value: string): void\n  removeItem(key: string): void\n}\n\ndeclare var localStorage: LocalStorageLike | undefined;\ndeclare var fetch: FetchLike | undefined;\n\nlet hasLocalStorage = false\ntry {\n  hasLocalStorage = typeof localStorage !== `undefined`\n} catch (error) { }\n\nconst hasProcess = typeof process !== `undefined`\nconst shouldDebug = (hasLocalStorage && localStorage!.getItem(\"DEBUG\")) || (hasProcess && process.env.DEBUG)\nconst debugLog = shouldDebug ? console.log : (_message?: any, ..._optionalParams: any[]) => \"\"\n\nexport interface VirtualTypeScriptEnvironment {\n  sys: System\n  languageService: import(\"typescript\").LanguageService\n  getSourceFile: (fileName: string) => import(\"typescript\").SourceFile | undefined\n  createFile: (fileName: string, content: string) => void\n  updateFile: (fileName: string, content: string, replaceTextSpan?: import(\"typescript\").TextSpan) => void\n  deleteFile: (fileName: string) => void\n}\n\n/**\n * Makes a virtual copy of the TypeScript environment. This is the main API you want to be using with\n * @typescript/vfs. A lot of the other exposed functions are used by this function to get set up.\n *\n * @param sys an object which conforms to the TS Sys (a shim over read/write access to the fs)\n * @param rootFiles a list of files which are considered inside the project\n * @param ts a copy pf the TypeScript module\n * @param compilerOptions the options for this compiler run\n * @param customTransformers custom transformers for this compiler run\n */\n\nexport function createVirtualTypeScriptEnvironment(\n  sys: System,\n  rootFiles: string[],\n  ts: TS,\n  compilerOptions: CompilerOptions = {},\n  customTransformers?: CustomTransformers\n): VirtualTypeScriptEnvironment {\n  const mergedCompilerOpts = { ...defaultCompilerOptions(ts), ...compilerOptions }\n\n  const { languageServiceHost, updateFile, deleteFile } = createVirtualLanguageServiceHost(\n    sys,\n    rootFiles,\n    mergedCompilerOpts,\n    ts,\n    customTransformers\n  )\n  const languageService = ts.createLanguageService(languageServiceHost)\n  const diagnostics = languageService.getCompilerOptionsDiagnostics()\n\n  if (diagnostics.length) {\n    const compilerHost = createVirtualCompilerHost(sys, compilerOptions, ts)\n    throw new Error(ts.formatDiagnostics(diagnostics, compilerHost.compilerHost))\n  }\n\n  return {\n    // @ts-ignore\n    name: \"vfs\",\n    sys,\n    languageService,\n    getSourceFile: fileName => languageService.getProgram()?.getSourceFile(fileName),\n\n    createFile: (fileName, content) => {\n      updateFile(ts.createSourceFile(fileName, content, mergedCompilerOpts.target!, false))\n    },\n    updateFile: (fileName, content, optPrevTextSpan) => {\n      const prevSourceFile = languageService.getProgram()!.getSourceFile(fileName)\n      if (!prevSourceFile) {\n        throw new Error(\"Did not find a source file for \" + fileName)\n      }\n      const prevFullContents = prevSourceFile.text\n\n      // TODO: Validate if the default text span has a fencepost error?\n      const prevTextSpan = optPrevTextSpan ?? ts.createTextSpan(0, prevFullContents.length)\n      const newText =\n        prevFullContents.slice(0, prevTextSpan.start) +\n        content +\n        prevFullContents.slice(prevTextSpan.start + prevTextSpan.length)\n      const newSourceFile = ts.updateSourceFile(prevSourceFile, newText, {\n        span: prevTextSpan,\n        newLength: content.length,\n      })\n\n      updateFile(newSourceFile)\n    },\n    deleteFile(fileName) {\n      const sourceFile = languageService.getProgram()!.getSourceFile(fileName)\n      if (sourceFile) {\n        deleteFile(sourceFile)\n      }\n    }\n  }\n}\n\n// TODO: This could be replaced by grabbing: https://github.com/microsoft/TypeScript/blob/main/src/lib/libs.json\n// and then using that to generate the list of files from the server, but it is not included in the npm package\n\n/**\n * Grab the list of lib files for a particular target, will return a bit more than necessary (by including\n * the dom) but that's OK, we're really working with the constraint that you can't get a list of files\n * when running in a browser.\n *\n * @param target The compiler settings target baseline\n * @param ts A copy of the TypeScript module\n */\nexport const knownLibFilesForCompilerOptions = (compilerOptions: CompilerOptions, ts: TS) => {\n  const target = compilerOptions.target || ts.ScriptTarget.ES5\n  const lib = compilerOptions.lib || []\n\n  // Note that this will include files which can't be found for particular versions of TS\n  // TODO: Replace this with some sort of API call if https://github.com/microsoft/TypeScript/pull/54011\n  // or similar is merged.\n  const files = [\n    \"lib.d.ts\",\n    \"lib.core.d.ts\",\n    \"lib.decorators.d.ts\",\n    \"lib.decorators.legacy.d.ts\",\n    \"lib.dom.asynciterable.d.ts\",\n    \"lib.dom.d.ts\",\n    \"lib.dom.iterable.d.ts\",\n    \"lib.webworker.asynciterable.d.ts\",\n    \"lib.webworker.d.ts\",\n    \"lib.webworker.importscripts.d.ts\",\n    \"lib.webworker.iterable.d.ts\",\n    \"lib.scripthost.d.ts\",\n    \"lib.es5.d.ts\",\n    \"lib.es6.d.ts\",\n    \"lib.es7.d.ts\",\n    \"lib.core.es6.d.ts\",\n    \"lib.core.es7.d.ts\",\n    \"lib.es2015.collection.d.ts\",\n    \"lib.es2015.core.d.ts\",\n    \"lib.es2015.d.ts\",\n    \"lib.es2015.generator.d.ts\",\n    \"lib.es2015.iterable.d.ts\",\n    \"lib.es2015.promise.d.ts\",\n    \"lib.es2015.proxy.d.ts\",\n    \"lib.es2015.reflect.d.ts\",\n    \"lib.es2015.symbol.d.ts\",\n    \"lib.es2015.symbol.wellknown.d.ts\",\n    \"lib.es2016.array.include.d.ts\",\n    \"lib.es2016.d.ts\",\n    \"lib.es2016.full.d.ts\",\n    \"lib.es2016.intl.d.ts\",\n    \"lib.es2017.arraybuffer.d.ts\",\n    \"lib.es2017.d.ts\",\n    \"lib.es2017.date.d.ts\",\n    \"lib.es2017.full.d.ts\",\n    \"lib.es2017.intl.d.ts\",\n    \"lib.es2017.object.d.ts\",\n    \"lib.es2017.sharedmemory.d.ts\",\n    \"lib.es2017.string.d.ts\",\n    \"lib.es2017.typedarrays.d.ts\",\n    \"lib.es2018.asyncgenerator.d.ts\",\n    \"lib.es2018.asynciterable.d.ts\",\n    \"lib.es2018.d.ts\",\n    \"lib.es2018.full.d.ts\",\n    \"lib.es2018.intl.d.ts\",\n    \"lib.es2018.promise.d.ts\",\n    \"lib.es2018.regexp.d.ts\",\n    \"lib.es2019.array.d.ts\",\n    \"lib.es2019.d.ts\",\n    \"lib.es2019.full.d.ts\",\n    \"lib.es2019.intl.d.ts\",\n    \"lib.es2019.object.d.ts\",\n    \"lib.es2019.string.d.ts\",\n    \"lib.es2019.symbol.d.ts\",\n    \"lib.es2020.bigint.d.ts\",\n    \"lib.es2020.d.ts\",\n    \"lib.es2020.date.d.ts\",\n    \"lib.es2020.full.d.ts\",\n    \"lib.es2020.intl.d.ts\",\n    \"lib.es2020.number.d.ts\",\n    \"lib.es2020.promise.d.ts\",\n    \"lib.es2020.sharedmemory.d.ts\",\n    \"lib.es2020.string.d.ts\",\n    \"lib.es2020.symbol.wellknown.d.ts\",\n    \"lib.es2021.d.ts\",\n    \"lib.es2021.full.d.ts\",\n    \"lib.es2021.intl.d.ts\",\n    \"lib.es2021.promise.d.ts\",\n    \"lib.es2021.string.d.ts\",\n    \"lib.es2021.weakref.d.ts\",\n    \"lib.es2022.array.d.ts\",\n    \"lib.es2022.d.ts\",\n    \"lib.es2022.error.d.ts\",\n    \"lib.es2022.full.d.ts\",\n    \"lib.es2022.intl.d.ts\",\n    \"lib.es2022.object.d.ts\",\n    \"lib.es2022.regexp.d.ts\",\n    \"lib.es2022.sharedmemory.d.ts\",\n    \"lib.es2022.string.d.ts\",\n    \"lib.es2023.array.d.ts\",\n    \"lib.es2023.collection.d.ts\",\n    \"lib.es2023.d.ts\",\n    \"lib.es2023.full.d.ts\",\n    \"lib.es2023.intl.d.ts\",\n    \"lib.es2024.arraybuffer.d.ts\",\n    \"lib.es2024.collection.d.ts\",\n    \"lib.es2024.d.ts\",\n    \"lib.es2024.full.d.ts\",\n    \"lib.es2024.object.d.ts\",\n    \"lib.es2024.promise.d.ts\",\n    \"lib.es2024.regexp.d.ts\",\n    \"lib.es2024.sharedmemory.d.ts\",\n    \"lib.es2024.string.d.ts\",\n    \"lib.esnext.array.d.ts\",\n    \"lib.esnext.asynciterable.d.ts\",\n    \"lib.esnext.bigint.d.ts\",\n    \"lib.esnext.collection.d.ts\",\n    \"lib.esnext.d.ts\",\n    \"lib.esnext.decorators.d.ts\",\n    \"lib.esnext.disposable.d.ts\",\n    \"lib.esnext.float16.d.ts\",\n    \"lib.esnext.full.d.ts\",\n    \"lib.esnext.intl.d.ts\",\n    \"lib.esnext.iterator.d.ts\",\n    \"lib.esnext.object.d.ts\",\n    \"lib.esnext.promise.d.ts\",\n    \"lib.esnext.regexp.d.ts\",\n    \"lib.esnext.string.d.ts\",\n    \"lib.esnext.symbol.d.ts\",\n    \"lib.esnext.weakref.d.ts\"\n  ]\n\n  const targetToCut = ts.ScriptTarget[target]\n  const matches = files.filter(f => f.startsWith(`lib.${targetToCut.toLowerCase()}`))\n  const targetCutIndex = files.indexOf(matches.pop()!)\n\n  const getMax = (array: number[]) =>\n    array && array.length ? array.reduce((max, current) => (current > max ? current : max)) : undefined\n\n  // Find the index for everything in\n  const indexesForCutting = lib.map(lib => {\n    const matches = files.filter(f => f.startsWith(`lib.${lib.toLowerCase()}`))\n    if (matches.length === 0) return 0\n\n    const cutIndex = files.indexOf(matches.pop()!)\n    return cutIndex\n  })\n\n  const libCutIndex = getMax(indexesForCutting) || 0\n\n  const finalCutIndex = Math.max(targetCutIndex, libCutIndex)\n  return files.slice(0, finalCutIndex + 1)\n}\n\n/**\n * Sets up a Map with lib contents by grabbing the necessary files from\n * the local copy of typescript via the file system.\n *\n * The first two args are un-used, but kept around so as to not cause a\n * semver major bump for no gain to module users.\n */\nexport const createDefaultMapFromNodeModules = (\n  _compilerOptions: CompilerOptions,\n  _ts?: typeof import(\"typescript\"),\n  tsLibDirectory?: string\n) => {\n  const path = requirePath()\n  const fs = requireFS()\n\n  const getLib = (name: string) => {\n    const lib = tsLibDirectory || path.dirname(require.resolve(\"typescript\"))\n    return fs.readFileSync(path.join(lib, name), \"utf8\")\n  }\n\n  const isDtsFile = (file: string) => /\\.d\\.([^\\.]+\\.)?[cm]?ts$/i.test(file)\n\n  const libFiles = fs.readdirSync(tsLibDirectory || path.dirname(require.resolve(\"typescript\")))\n  const knownLibFiles = libFiles.filter(f => f.startsWith(\"lib.\") && isDtsFile(f))\n\n  const fsMap = new Map<string, string>()\n  knownLibFiles.forEach(lib => {\n    fsMap.set(\"/\" + lib, getLib(lib))\n  })\n  return fsMap\n}\n\n/**\n * Adds recursively files from the FS into the map based on the folder\n */\nexport const addAllFilesFromFolder = (map: Map<string, string>, workingDir: string): void => {\n  const path = requirePath()\n  const fs = requireFS()\n\n  const walk = function (dir: string) {\n    let results: string[] = []\n    const list = fs.readdirSync(dir)\n    list.forEach(function (file: string) {\n      file = path.join(dir, file)\n      const stat = fs.statSync(file)\n      if (stat && stat.isDirectory()) {\n        /* Recurse into a subdirectory */\n        results = results.concat(walk(file))\n      } else {\n        /* Is a file */\n        results.push(file)\n      }\n    })\n    return results\n  }\n\n  const allFiles = walk(workingDir)\n\n  allFiles.forEach(lib => {\n    const fsPath = \"/node_modules/@types\" + lib.replace(workingDir, \"\")\n    const content = fs.readFileSync(lib, \"utf8\")\n    const validExtensions = [\".ts\", \".tsx\"]\n\n    if (validExtensions.includes(path.extname(fsPath))) {\n      map.set(fsPath, content)\n    }\n  })\n}\n\n/** Adds all files from node_modules/@types into the FS Map */\nexport const addFilesForTypesIntoFolder = (map: Map<string, string>) =>\n  addAllFilesFromFolder(map, \"node_modules/@types\")\n\nexport interface LZString {\n  compressToUTF16(input: string): string\n  decompressFromUTF16(compressed: string): string\n}\n\n/**\n * Create a virtual FS Map with the lib files from a particular TypeScript\n * version based on the target, Always includes dom ATM.\n *\n * @param options The compiler target, which dictates the libs to set up\n * @param version the versions of TypeScript which are supported\n * @param cache should the values be stored in local storage\n * @param ts a copy of the typescript import\n * @param lzstring an optional copy of the lz-string import\n * @param fetcher an optional replacement for the global fetch function (tests mainly)\n * @param storer an optional replacement for the localStorage global (tests mainly)\n */\nexport const createDefaultMapFromCDN = (\n  options: CompilerOptions,\n  version: string,\n  cache: boolean,\n  ts: TS,\n  lzstring?: LZString,\n  fetcher?: FetchLike,\n  storer?: LocalStorageLike\n) => {\n  const fetchlike = fetcher || fetch!\n  const fsMap = new Map<string, string>()\n  const files = knownLibFilesForCompilerOptions(options, ts)\n  const prefix = `https://playgroundcdn.typescriptlang.org/cdn/${version}/typescript/lib/`\n\n  function zip(str: string) {\n    return lzstring ? lzstring.compressToUTF16(str) : str\n  }\n\n  function unzip(str: string) {\n    return lzstring ? lzstring.decompressFromUTF16(str) : str\n  }\n\n  // Map the known libs to a node fetch promise, then return the contents\n  function uncached() {\n    return (\n      Promise.all(files.map(lib => fetchlike(prefix + lib).then(resp => resp.text())))\n        .then(contents => {\n          contents.forEach((text, index) => fsMap.set(\"/\" + files[index], text))\n        })\n        // Return a NOOP for .d.ts files which aren't in the current build of TypeScript\n        .catch(() => { })\n    )\n  }\n\n  // A localstorage and lzzip aware version of the lib files\n  function cached() {\n    const storelike = storer || localStorage!\n\n    const keys = Object.keys(storelike)\n    keys.forEach(key => {\n      // Remove anything which isn't from this version\n      if (key.startsWith(\"ts-lib-\") && !key.startsWith(\"ts-lib-\" + version)) {\n        storelike.removeItem(key)\n      }\n    })\n\n    return Promise.all(\n      files.map(lib => {\n        const cacheKey = `ts-lib-${version}-${lib}`\n        const content = storelike.getItem(cacheKey)\n\n        if (!content) {\n          // Make the API call and store the text concent in the cache\n          return (\n            fetchlike(prefix + lib)\n              .then(resp => resp.text())\n              .then(t => {\n                storelike.setItem(cacheKey, zip(t))\n                return t\n              })\n              // Return a NOOP for .d.ts files which aren't in the current build of TypeScript\n              .catch(() => { })\n          )\n        } else {\n          return Promise.resolve(unzip(content))\n        }\n      })\n    ).then(contents => {\n      contents.forEach((text, index) => {\n        if (text) {\n          const name = \"/\" + files[index]\n          fsMap.set(name, text)\n        }\n      })\n    })\n  }\n\n  const func = cache ? cached : uncached\n  return func().then(() => fsMap)\n}\n\nfunction notImplemented(methodName: string): any {\n  throw new Error(`Method '${methodName}' is not implemented.`)\n}\n\nfunction audit<ArgsT extends any[], ReturnT>(\n  name: string,\n  fn: (...args: ArgsT) => ReturnT\n): (...args: ArgsT) => ReturnT {\n  return (...args) => {\n    const res = fn(...args)\n\n    const smallres = typeof res === \"string\" ? res.slice(0, 80) + \"...\" : res\n    debugLog(\"> \" + name, ...args)\n    debugLog(\"< \" + smallres)\n\n    return res\n  }\n}\n\n/** The default compiler options if TypeScript could ever change the compiler options */\nconst defaultCompilerOptions = (ts: typeof import(\"typescript\")): CompilerOptions => {\n  return {\n    ...ts.getDefaultCompilerOptions(),\n    jsx: ts.JsxEmit.React,\n    strict: true,\n    esModuleInterop: true,\n    module: ts.ModuleKind.ESNext,\n    suppressOutputPathCheck: true,\n    skipLibCheck: true,\n    skipDefaultLibCheck: true,\n    moduleResolution: ts.ModuleResolutionKind.NodeJs,\n  }\n}\n\n// \"/DOM.d.ts\" => \"/lib.dom.d.ts\"\nconst libize = (path: string) => path.replace(\"/\", \"/lib.\").toLowerCase()\n\n/**\n * Creates an in-memory System object which can be used in a TypeScript program, this\n * is what provides read/write aspects of the virtual fs\n */\nexport function createSystem(files: Map<string, string>): System {\n  return {\n    args: [],\n    createDirectory: () => notImplemented(\"createDirectory\"),\n    // TODO: could make a real file tree\n    directoryExists: audit(\"directoryExists\", directory => {\n      return Array.from(files.keys()).some(path => path.startsWith(directory))\n    }),\n    exit: () => notImplemented(\"exit\"),\n    fileExists: audit(\"fileExists\", fileName => files.has(fileName) || files.has(libize(fileName))),\n    getCurrentDirectory: () => \"/\",\n    getDirectories: () => [],\n    getExecutingFilePath: () => notImplemented(\"getExecutingFilePath\"),\n    readDirectory: audit(\"readDirectory\", directory => (directory === \"/\" ? Array.from(files.keys()) : [])),\n    readFile: audit(\"readFile\", fileName => files.get(fileName) ?? files.get(libize(fileName))),\n    resolvePath: path => path,\n    newLine: \"\\n\",\n    useCaseSensitiveFileNames: true,\n    write: () => notImplemented(\"write\"),\n    writeFile: (fileName, contents) => {\n      files.set(fileName, contents)\n    },\n    deleteFile: (fileName) => {\n      files.delete(fileName)\n    },\n  }\n}\n\n/**\n * Creates a file-system backed System object which can be used in a TypeScript program, you provide\n * a set of virtual files which are prioritised over the FS versions, then a path to the root of your\n * project (basically the folder your node_modules lives)\n */\nexport function createFSBackedSystem(\n  files: Map<string, string>,\n  _projectRoot: string,\n  ts: TS,\n  tsLibDirectory?: string\n): System {\n  // We need to make an isolated folder for the tsconfig, but also need to be able to resolve the\n  // existing node_modules structures going back through the history\n  const root = _projectRoot + \"/vfs\"\n  const path = requirePath()\n\n  // The default System in TypeScript\n  const nodeSys = ts.sys\n  const tsLib = tsLibDirectory ?? path.dirname(require.resolve(\"typescript\"))\n\n  return {\n    // @ts-ignore\n    name: \"fs-vfs\",\n    root,\n    args: [],\n    createDirectory: () => notImplemented(\"createDirectory\"),\n    // TODO: could make a real file tree\n    directoryExists: audit(\"directoryExists\", directory => {\n      return Array.from(files.keys()).some(path => path.startsWith(directory)) || nodeSys.directoryExists(directory)\n    }),\n    exit: nodeSys.exit,\n    fileExists: audit(\"fileExists\", fileName => {\n      if (files.has(fileName)) return true\n      // Don't let other tsconfigs end up touching the vfs\n      if (fileName.includes(\"tsconfig.json\") || fileName.includes(\"tsconfig.json\")) return false\n      if (fileName.startsWith(\"/lib\")) {\n        const tsLibName = `${tsLib}/${fileName.replace(\"/\", \"\")}`\n        return nodeSys.fileExists(tsLibName)\n      }\n      return nodeSys.fileExists(fileName)\n    }),\n    getCurrentDirectory: () => root,\n    getDirectories: nodeSys.getDirectories,\n    getExecutingFilePath: () => notImplemented(\"getExecutingFilePath\"),\n    readDirectory: audit(\"readDirectory\", (...args) => {\n      if (args[0] === \"/\") {\n        return Array.from(files.keys())\n      } else {\n        return nodeSys.readDirectory(...args)\n      }\n    }),\n    readFile: audit(\"readFile\", fileName => {\n      if (files.has(fileName)) return files.get(fileName)\n      if (fileName.startsWith(\"/lib\")) {\n        const tsLibName = `${tsLib}/${fileName.replace(\"/\", \"\")}`\n        const result = nodeSys.readFile(tsLibName)\n        if (!result) {\n          const libs = nodeSys.readDirectory(tsLib)\n          throw new Error(\n            `TSVFS: A request was made for ${tsLibName} but there wasn't a file found in the file map. You likely have a mismatch in the compiler options for the CDN download vs the compiler program. Existing Libs: ${libs}.`\n          )\n        }\n        return result\n      }\n      return nodeSys.readFile(fileName)\n    }),\n    resolvePath: path => {\n      if (files.has(path)) return path\n      return nodeSys.resolvePath(path)\n    },\n    newLine: \"\\n\",\n    useCaseSensitiveFileNames: true,\n    write: () => notImplemented(\"write\"),\n    writeFile: (fileName, contents) => {\n      files.set(fileName, contents)\n    },\n    deleteFile: (fileName) => {\n      files.delete(fileName)\n    },\n    realpath: nodeSys.realpath,\n  }\n}\n\n/**\n * Creates an in-memory CompilerHost -which is essentially an extra wrapper to System\n * which works with TypeScript objects - returns both a compiler host, and a way to add new SourceFile\n * instances to the in-memory file system.\n */\nexport function createVirtualCompilerHost(sys: System, compilerOptions: CompilerOptions, ts: TS) {\n  const sourceFiles = new Map<string, SourceFile>()\n  const save = (sourceFile: SourceFile) => {\n    sourceFiles.set(sourceFile.fileName, sourceFile)\n    return sourceFile\n  }\n\n  type Return = {\n    compilerHost: CompilerHost\n    updateFile: (sourceFile: SourceFile) => boolean\n    deleteFile: (sourceFile: SourceFile) => boolean\n  }\n\n  const vHost: Return = {\n    compilerHost: {\n      ...sys,\n      getCanonicalFileName: fileName => fileName,\n      getDefaultLibFileName: () => \"/\" + ts.getDefaultLibFileName(compilerOptions), // '/lib.d.ts',\n      // getDefaultLibLocation: () => '/',\n      getNewLine: () => sys.newLine,\n      getSourceFile: (fileName, languageVersionOrOptions) => {\n        return (\n          sourceFiles.get(fileName) ||\n          save(\n            ts.createSourceFile(\n              fileName,\n              sys.readFile(fileName)!,\n              languageVersionOrOptions ?? compilerOptions.target ?? defaultCompilerOptions(ts).target!,\n              false\n            )\n          )\n        )\n      },\n      useCaseSensitiveFileNames: () => sys.useCaseSensitiveFileNames,\n    },\n    updateFile: sourceFile => {\n      const alreadyExists = sourceFiles.has(sourceFile.fileName)\n      sys.writeFile(sourceFile.fileName, sourceFile.text)\n      sourceFiles.set(sourceFile.fileName, sourceFile)\n      return alreadyExists\n    },\n    deleteFile: sourceFile => {\n      const alreadyExists = sourceFiles.has(sourceFile.fileName)\n      sourceFiles.delete(sourceFile.fileName)\n      sys.deleteFile!(sourceFile.fileName)\n      return alreadyExists\n    }\n  }\n  return vHost\n}\n\n/**\n * Creates an object which can host a language service against the virtual file-system\n */\nexport function createVirtualLanguageServiceHost(\n  sys: System,\n  rootFiles: string[],\n  compilerOptions: CompilerOptions,\n  ts: TS,\n  customTransformers?: CustomTransformers\n) {\n  const fileNames = [...rootFiles]\n  const { compilerHost, updateFile, deleteFile } = createVirtualCompilerHost(sys, compilerOptions, ts)\n  const fileVersions = new Map<string, string>()\n  let projectVersion = 0\n  const languageServiceHost: LanguageServiceHost = {\n    ...compilerHost,\n    getProjectVersion: () => projectVersion.toString(),\n    getCompilationSettings: () => compilerOptions,\n    getCustomTransformers: () => customTransformers,\n    // A couple weeks of 4.8 TypeScript nightlies had a bug where the Program's\n    // list of files was just a reference to the array returned by this host method,\n    // which means mutations by the host that ought to result in a new Program being\n    // created were not detected, since the old list of files and the new list of files\n    // were in fact a reference to the same underlying array. That was fixed in\n    // https://github.com/microsoft/TypeScript/pull/49813, but since the twoslash runner\n    // is used in bisecting for changes, it needs to guard against being busted in that\n    // couple-week period, so we defensively make a slice here.\n    getScriptFileNames: () => fileNames.slice(),\n    getScriptSnapshot: fileName => {\n      const contents = sys.readFile(fileName)\n      if (contents && typeof contents === \"string\") {\n        return ts.ScriptSnapshot.fromString(contents)\n      }\n      return\n    },\n    getScriptVersion: fileName => {\n      return fileVersions.get(fileName) || \"0\"\n    },\n    writeFile: sys.writeFile,\n  }\n\n  type Return = {\n    languageServiceHost: LanguageServiceHost\n    updateFile: (sourceFile: import(\"typescript\").SourceFile) => void\n    deleteFile: (sourceFile: import(\"typescript\").SourceFile) => void\n  }\n\n  const lsHost: Return = {\n    languageServiceHost,\n    updateFile: sourceFile => {\n      projectVersion++\n      fileVersions.set(sourceFile.fileName, projectVersion.toString())\n      if (!fileNames.includes(sourceFile.fileName)) {\n        fileNames.push(sourceFile.fileName)\n      }\n      updateFile(sourceFile)\n    },\n    deleteFile: sourceFile => {\n      projectVersion++\n      fileVersions.set(sourceFile.fileName, projectVersion.toString())\n      const index = fileNames.indexOf(sourceFile.fileName)\n      if (index !== -1) {\n        fileNames.splice(index, 1)\n      }\n      deleteFile(sourceFile)\n    }\n  }\n  return lsHost\n}\n\nconst requirePath = () => {\n  return require(String.fromCharCode(112, 97, 116, 104)) as typeof import(\"path\")\n}\n\nconst requireFS = () => {\n  return require(String.fromCharCode(102, 115)) as typeof import(\"fs\")\n}\n"],"names":["hasLocalStorage","localStorage","error","hasProcess","process","shouldDebug","getItem","env","DEBUG","debugLog","console","log","_message","createVirtualTypeScriptEnvironment","sys","rootFiles","ts","compilerOptions","customTransformers","mergedCompilerOpts","_extends","defaultCompilerOptions","_createVirtualLanguag","createVirtualLanguageServiceHost","languageServiceHost","updateFile","deleteFile","languageService","createLanguageService","diagnostics","getCompilerOptionsDiagnostics","length","compilerHost","createVirtualCompilerHost","Error","formatDiagnostics","name","getSourceFile","fileName","_languageService$getP","getProgram","createFile","content","createSourceFile","target","optPrevTextSpan","prevSourceFile","prevFullContents","text","prevTextSpan","createTextSpan","newText","slice","start","newSourceFile","updateSourceFile","span","newLength","sourceFile","knownLibFilesForCompilerOptions","ScriptTarget","ES5","lib","files","targetToCut","matches","filter","f","startsWith","toLowerCase","targetCutIndex","indexOf","pop","getMax","array","reduce","max","current","undefined","indexesForCutting","map","cutIndex","libCutIndex","finalCutIndex","Math","createDefaultMapFromNodeModules","_compilerOptions","_ts","tsLibDirectory","path","requirePath","fs","requireFS","getLib","dirname","require","resolve","readFileSync","join","isDtsFile","file","test","libFiles","readdirSync","knownLibFiles","fsMap","Map","forEach","set","addAllFilesFromFolder","workingDir","walk","dir","results","list","stat","statSync","isDirectory","concat","push","allFiles","fsPath","replace","validExtensions","includes","extname","addFilesForTypesIntoFolder","createDefaultMapFromCDN","options","version","cache","lzstring","fetcher","storer","fetchlike","fetch","prefix","zip","str","compressToUTF16","unzip","decompressFromUTF16","uncached","Promise","all","then","resp","contents","index","cached","storelike","keys","Object","key","removeItem","cacheKey","t","setItem","func","notImplemented","methodName","audit","fn","_len","arguments","args","Array","_key","res","apply","smallres","getDefaultCompilerOptions","jsx","JsxEmit","React","strict","esModuleInterop","module","ModuleKind","ESNext","suppressOutputPathCheck","skipLibCheck","skipDefaultLibCheck","moduleResolution","ModuleResolutionKind","NodeJs","libize","createSystem","createDirectory","directoryExists","directory","from","some","exit","fileExists","has","getCurrentDirectory","getDirectories","getExecutingFilePath","readDirectory","readFile","_files$get","get","resolvePath","newLine","useCaseSensitiveFileNames","write","writeFile","createFSBackedSystem","_projectRoot","root","nodeSys","tsLib","tsLibName","result","libs","realpath","sourceFiles","save","vHost","getCanonicalFileName","getDefaultLibFileName","getNewLine","languageVersionOrOptions","_ref","alreadyExists","fileNames","_createVirtualCompile","fileVersions","projectVersion","getProjectVersion","toString","getCompilationSettings","getCustomTransformers","getScriptFileNames","getScriptSnapshot","ScriptSnapshot","fromString","getScriptVersion","lsHost","splice","String","fromCharCode"],"mappings":"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"}